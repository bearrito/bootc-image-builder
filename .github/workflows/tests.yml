---
name: Tests

on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - "main"
  # for merge queue
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  integration-conditional:
    name: "Integration Conditional"
    runs-on: ubuntu-latest
    outputs:
      run-integration-test: ${{ steps.step1.outputs.test }}
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}

    - name: Display commit
      run: |
        echo "BASE_REF: $GITHUB_BASE_REF"
        echo "REF: $GITHUB_REF"
        echo "HEAD REF: $GITHUB_HEAD_REF"
        echo "SHA: $GITHUB_SHA"
    - name: Parse commit
      id: step1
      run: |
        changed_files=$(git diff --raw "$GITHUB_BASE_REF" "$GITHUB_HEAD_REF" | cut -f2)
        num_files=$(echo "$changed_files" | wc -l)
        contains_readme=$(grep -vsF "CANARY.md" <<< "$changed_files")
        if [[ $num_files -eq 1  && -n $contains_readme ]]; then
            echo "Conditional:False"
            echo "test=false" >> "$GITHUB_OUTPUT"
        else
            echo "Conditional:True"
            echo "test=true" >> "$GITHUB_OUTPUT"
        fi

  lint:
    name: "‚å® Lint & unittests"
    runs-on: ubuntu-latest
    needs: integration-conditional
    if: needs.integration-conditional.outputs.run-integration-test == 'true'
    steps:
      - name: Set up Go 1.20
        uses: actions/setup-go@v5
        with:
          go-version: "1.20"
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Apt update
        run: sudo apt update

      # This is needed for the container upload dependencies
      - name: Install libgpgme devel package
        run: sudo apt install -y libgpgme-dev libbtrfs-dev libdevmapper-dev

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.55.2
          args: --timeout 5m0s
          working-directory: bib

      - name: Run unit tests
        run: (cd bib && go test -race  ./...)

  shellcheck:
    name: "üêö Shellcheck"
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v4
      with:
        ref: ${{ github.event.pull_request.head.sha }}
    - name: Run ShellCheck
      uses: ludeeus/action-shellcheck@00cae500b08a931fb5698e11e79bfbd38e612a38
      with:
        ignore: vendor # We don't want to fix the code in vendored dependencies
      env:
        # don't check /etc/os-release sourcing, allow useless cats to live inside our codebase, and
        # allow seemingly unreachable commands
        SHELLCHECK_OPTS: -e SC1091 -e SC2002 -e SC2317

  